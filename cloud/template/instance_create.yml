AWSTemplateFormatVersion: '2010-09-09'
Description: Provisions a single-tenant environment using the official, robust Composer installation script.

Parameters:
  InstanceDBName:
    Type: String
    Description: A unique name for the instance's database.
  InstanceDBPassword:
    Type: String
    NoEcho: true
    Description: The password for the instance's database.
  InstanceName:
    Type: String
    Description: The Name of The Store.
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance.

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${InstanceDBName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${InstanceDBName}-Public-Subnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for the instance database
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${InstanceDBName}-Private-Subnet-A

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${InstanceDBName}-Private-Subnet-B

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Enable HTTP and SSH access'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - { IpProtocol: tcp, FromPort: 80, ToPort: 80, CidrIp: 0.0.0.0/0 }
        - { IpProtocol: tcp, FromPort: 22, ToPort: 22, CidrIp: 0.0.0.0/0 }

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow webserver to connect to the database'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - { IpProtocol: tcp, FromPort: 3306, ToPort: 3306, SourceSecurityGroupId: !GetAtt WebSecurityGroup.GroupId }

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      InstanceType: t4g.micro
      ImageId: ami-0cf0829a0f92050e8 # Amazon Linux 2023 ARM AMI (ap-southeast-1).
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds: [!Ref WebSecurityGroup]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          echo "Logging Started" >> /var/log/user-data.log

          echo "=====[Explicitly Set Home Variable]=====" >> /var/log/user-data.log
          export HOME=/root
          echo "=====[Home Variable Set]=====" >> /var/log/user-data.log

          # Install system packages and all required PHP extensions
          echo "=====[Updating and installing system packages]=====" >> /var/log/user-data.log
          dnf update -y
          dnf install -y httpd git php8.2 php8.2-mbstring php8.2-xml php8.2-fpm php8.2-pdo php8.2-mysqlnd php8.2-common php8.2-bcmath php8.2-cli
          echo "===[Packages installed]===" >> /var/log/user-data.log

          # Install Composer globally using the official, robust method
          echo "=====[installing Composer]=====" >> /var/log/user-data.log
          cd /tmp
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          php composer-setup.php
          php -r "unlink('composer-setup.php');"
          mv composer.phar /usr/local/bin/composer
          echo "===[Composer installed]===" >> /var/log/user-data.log

          # Clone Laravel App
          echo "=====[Cloning Git Project]=====" >> /var/log/user-data.log
          git clone https://github.com/noorfikri/kp_asri.git -b saas_deploy_app /var/www/html
          echo "===[Git Project Cloned]===" >> /var/log/user-data.log

          # Configure Laravel
          echo "=====[Configuring Laravel]=====" >> /var/log/user-data.log
          cd /var/www/html
          composer install --no-interaction --prefer-dist --optimize-autoloader

          cp .env.example .env
          php artisan key:generate
          echo "===[Laravel Configured]===" >> /var/log/user-data.log

          # Set .env variables
          echo "=====[Setting .env Variables]=====" >> /var/log/user-data.log
          sed -i "s/DB_HOST=127.0.0.1/DB_HOST=${DB.Endpoint.Address}/g" .env
          sed -i "s/DB_DATABASE=laravel/DB_DATABASE=${InstanceDBName}/g" .env
          sed -i "s/DB_USERNAME=root/DB_USERNAME=admin/g" .env
          sed -i "s/STORE_NAME=TokoKu/STORE_NAME=${InstanceName}/g" .env
          sed -i "s/DB_PASSWORD=/DB_PASSWORD=${InstanceDBPassword}/g" .env
          sed -i "s/APP_DEBUG=false/APP_DEBUG=true/g" .env
          echo "===[.env Variables Set]===" >> /var/log/user-data.log

          # Set Permissions
          echo "=====[Setting Permissions]=====" >> /var/log/user-data.log
          chown -R apache:apache /var/www/html
          chmod -R 775 /var/www/html/storage /var/www/html/bootstrap/cache
          echo "===[Permissions Set]===" >> /var/log/user-data.log

          # Run Migrations & Clear Config
          echo "=====[Running Migrations]=====" >> /var/log/user-data.log
          php artisan optimize:clear
          php artisan migrate --seed --force
          php artisan storage:link
          echo "===[Migrations Set]===" >> /var/log/user-data.log

          # Configure Apache
          echo "=====[Configuring Apache]=====" >> /var/log/user-data.log
          cat > /etc/httpd/conf.d/laravel.conf <<EOF
          <VirtualHost *:80>
              DocumentRoot /var/www/html/public
              <Directory /var/www/html/public>
                  AllowOverride All
                  Require all granted
              </Directory>
          </VirtualHost>
          EOF
          echo "===[Apache Configured]===" >> /var/log/user-data.log

          # Enable and Start Services
          echo "=====[Starting Services]=====" >> /var/log/user-data.log
          systemctl enable php-fpm
          systemctl start php-fpm
          systemctl enable httpd
          systemctl restart httpd
          echo "===[Services Started]===" >> /var/log/user-data.log
      Tags:
        - Key: Name
          Value: !Sub ${InstanceDBName}-WebServer

  DB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref InstanceDBName
      Engine: mysql
      MasterUsername: admin
      MasterUserPassword: !Ref InstanceDBPassword
      DBInstanceClass: db.t4g.micro
      AllocatedStorage: '20'
      DBSubnetGroupName: !Ref DBSubnetGroup
      DeletionProtection: false
      VPCSecurityGroups: [!Ref DBSecurityGroup]

Outputs:
  WebAppURL:
    Description: "URL of the new instance's application"
    Value: !GetAtt EC2Instance.PublicDnsName
